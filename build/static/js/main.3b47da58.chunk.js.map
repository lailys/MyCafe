{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","matchingMarker","filteredMarkers","selectedLocations","showingInfoWindow","showingInfoWindow2","activeMarker","activeButton","selectedPlace","markerName","markerLocation","query","getVenues","_callee","regenerator_default","a","wrap","_context","prev","next","axios","get","then","response","data","venues","map","venue","name","lat","location","lng","id","isVisible","_this","setState","catch","error","console","log","stop","this","onMarkerClick","e","marker","markerPosition","forEach","formattedAddress","onButtonClick","button","locationFilter","word","markers","match","RegExp","escapeRegExp","results","test","push","queryChange","_callee2","_context2","_this2","markerList","react_default","createElement","dist","key","position","onClick","role","tabIndex","buttonList","i","className","address","value","google","props","initialCenter","zoom","options","pixelOffset","window","maps","Size","visible","lib","type","placeholder","onChange","target","Component","GoogleApiWrapper","apiKey","Boolean","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b47da58.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport {DebounceInput} from 'react-debounce-input'\nimport escapeRegExp from 'escape-string-regexp';\nimport axios from 'axios';\n\n\n\n\n\nclass App extends Component {\n\n\n     /**\n    * states\n  */\n\n\n\n    state={\n      matchingMarker:[],\n      filteredMarkers:[],\n      selectedLocations:[],\n      showingInfoWindow: false,\n      showingInfoWindow2:false,\n      activeMarker: {},\n      activeButton: {},\n      selectedPlace:{},\n      markerName:'',\n      markerLocation:'',\n      query:''\n    }\n\n\n    componentDidMount() {\n       this.getVenues()\n     }\n\n\n\n     /**\n    * function to get the matched locations and markers\n   */\n\n\n\n    getVenues = async () => {\n        await axios.get('https://api.foursquare.com/v2/venues/search?client_id=RQIJIE0KSRV1TJTISKESDU5TI0BB4IKLIM0BIHV2KZAQVGTD&client_secret=ZYYG433Z3GYP2G25OKMT2QJ3BOS2NKCHPA431ZN4KYHGKPFS&v=20180323&ll=37.4463611,-122.16075230000001&query=coffee&radius=1000')\n        .then(response => {\n          const venues=response.data.response.venues\n\n        const matchingMarker=venues.map((venue)=>{\n          return{\n            name:venue.name,\n            lat:venue.location.lat,\n            lng:venue.location.lng,\n            id:venue.id,\n            isVisible:true\n          }\n        })\n            this.setState({matchingMarker})\n          this.setState({selectedLocations:response.data.response.venues,\n                         filteredMarkers:response.data.response.venues})\n\n        }).catch(error => {\n          console.log(error)\n        })\n    }\n\n\n\n    /**\n    * showing the InfoWindow by clicking on the marker\n  */\n\n\n    onMarkerClick = (e,marker) =>{\n       let markerPosition={lat:marker.lat,lng:marker.lng}\n            this.setState({activeMarker:markerPosition,\n                            showingInfoWindow:true})\n        this.state.selectedLocations.forEach((venue)=>{\n          if(marker.id===venue.id){\n              this.setState({\n              markerName:venue.name,\n              markerLocation:venue.location.formattedAddress\n            })\n\n          }\n        }\n  )\n     }\n\n\n     /**\n    * showing the InfoWindow by clicking on the button related to the marker\n  */\n\n\n     onButtonClick= (e,button)=> {\n            this.state.matchingMarker.forEach((marker)=>{\n              if(marker.id===button.id)\n              {\n             this.onMarkerClick(e,marker)\n\n              }\n          })\n      ;}\n\n\n\n      /**\n      * filtering the markers on the map and the sidebar list by searching the query\n     * typed in the search input\n    */\n\n\n    locationFilter= (word) =>{\n               const markers = this.state.selectedLocations;\n               const match=new RegExp(escapeRegExp(word), \"i\")\n               if (word) {\n                         let results=[]\n                         markers.forEach((marker)=>{\n                              if (marker.error) {this.setState({filteredMarkers:this.state.selectedLocations})\n                             }else{\n                               if (match.test(marker.name)) {\n                                 results.push(marker);\n                               }\n                             }\n                              })\n                              this.setState({filteredMarkers:results})\n                    }\n              else{\n                    this.setState({filteredMarkers:this.state.selectedLocations})\n            }\n     }\n  queryChange=async (word) =>{\n       this.setState({query:word})\n       await this.locationFilter(word)\n\n     }\n\n\n\nrender() {\n\n\n    /**\n   * rendering the markers on the map\n */\n\n\n    const markerList = this.state.matchingMarker.map((venue) => {\n    return (<Marker key={venue.lat} name={venue.name} id={venue.id}\n             position={{lat:venue.lat, lng:venue.lng}}\n             onClick={(e)=>this.onMarkerClick(e,venue)} role='button' tabIndex=\"0\"/>)\n            })\n\n\n      /**\n     * rendering the buttons on the sidebar\n    */\n\n\n    const buttonList=this.state.filteredMarkers.map(i => {\n    return( <button  tabIndex=\"0\" className='button' key={ i.id} address={i.location.address}\n    value={i.name}  onClick={(e)=>this.onButtonClick(e,i)}> {i.name}</button>)\n    })\n\n\n return (\n\n\n      <main id=\"container\">\n\n          <header id=\"header\" tabIndex=\"0\" >MY NEIGHBORHOOD MAP</header>\n\n          <section id='scroll'>\n\n                    <div id='map' >\n                    <Map className='mapMap'\n                         google={this.props.google}\n                         initialCenter={{\n                             lat: 37.4463611,\n                             lng: -122.16075230000001\n                              }}\n                         zoom={15}>\n\n\n\n                          { markerList}\n\n\n\n                      <InfoWindow\n                               options={{pixelOffset: new window.google.maps.Size(0,-40)}}\n                               position={this.state.activeMarker}\n                               visible={this.state.showingInfoWindow}>\n                                 <div id='info'>\n                                 <span className=\"venueName\">{this.state.markerName}</span>\n                                 <br/><br/>\n                                 Address:<br/>{this.state.markerLocation}\n                                 </div>\n                      </InfoWindow>\n\n\n\n                      </Map>\n                      </div  >\n\n\n                      <DebounceInput id='input1' type='text'\n                                     value={this.state.query}\n                                     placeholder='search location'\n                                     onChange={(e) => this.queryChange(e.target.value)}\n                                     tabIndex=\"0\"/>\n\n                    <div id='list'>\n                     {buttonList}\n                      </div>\n\n            </section>\n\n      </main>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: ('AIzaSyA45OMUI_gsIlA4xZ0gzwqfkC4s-eDhdOk')\n})(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.****************l\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}